import Feedback from '@/components/Feedback';
import { useAuth } from '@/lib/auth';
import {
    createFeedback,
    getAllFeedbackSite,
    getAllSites
} from '@/lib/firestore';
import {
    Box,
    FormControl,
    FormLabel,
    Input,
    Button,
    Flex
} from '@chakra-ui/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useRef, useState } from 'react';
import useSWR from 'swr';

export async function getStaticProps(context) {
    const siteID = context.params.siteID;
    const feedbacks = await getAllFeedbackSite(siteID);
    return {
        props: {
            initialFeedback: feedbacks
        }
    };
}
export async function getStaticPaths() {
    const sites = await getAllSites();
    const paths = sites.map((site) => ({
        params: {
            siteID: site.id.toString()
        }
    }));
    return {
        paths,
        fallback: false // false or 'blocking'
    };
}

export default function SiteFeedback({ initialFeedback }) {
    const auth = useAuth();
    const router = useRouter();
    const inputRef = useRef(null);
    const [allFeedback, setAllFeedback] = useState(initialFeedback);

    const onSubmit = async (e) => {
        e.preventDefault();
        const newFeedback = {
            author: auth.user.name,
            authorID: auth.user.uid,
            textContent: e.target.elements.feedback.value,
            createdAt: new Date().toISOString(),
            siteID: router.query.siteID,
            provider: auth.user.provider,
            status: 'pending'
        };
        const newFeedbackID = await createFeedback(newFeedback).then((doc) => {
            return doc;
        });
        setAllFeedback([{ id: newFeedbackID, ...newFeedback }, ...allFeedback]);
    };

    return (
        <>
            <Head>
                <title>QF | Feedback Page</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Flex
                justifyContent={'center'}
                direction={'column'}
                width="full"
                alignItems={'center'}
            >
                <Box
                    as="form"
                    padding={4}
                    display={'flex'}
                    flexDirection="column"
                    maxWidth={'700px'}
                    width="full"
                    onSubmit={onSubmit}
                >
                    <FormControl my={8}>
                        <FormLabel htmlFor="feedback">
                            Comment Down Below :
                        </FormLabel>
                        <Input ref={inputRef} id="feedback" type="text" />
                        <Button my={4} type="submit">
                            Submit Your Feedback
                        </Button>
                    </FormControl>
                </Box>
                <Box
                    as="ul"
                    display={'flex'}
                    flexDirection="column"
                    maxWidth={'700px'}
                    width="full"
                    padding={4}
                >
                    {allFeedback.map((feedback) => {
                        return <Feedback key={feedback.id} {...feedback} />;
                    })}
                </Box>
            </Flex>
        </>
    );
}
